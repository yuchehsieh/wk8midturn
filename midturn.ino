#include<Wire.h>
#include<SPI.h>
#include<Adafruit_GFX.h>
#include<Adafruit_SSD1306.h>
//Define Variables
#define OLED_MOSI 12 //D1
#define OLED_CLK 13 //D0
#define OLED_DC 10 //DC
#define OLED_CS 9//CS
#define OLED_RESET 11 //RES
#define fsr_pin A0
Adafruit_SSD1306 display(OLED_MOSI,OLED_CLK,OLED_DC,OLED_RESET,OLED_CS);
static const unsigned char PROGMEM walk1[]={
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x07,0xf0,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1f,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1f,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x00,0x0f,0xfc,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1f,0xc0,0x00,0x00,0x00,0x00,
  0x00,0x00,0x7f,0xf0,0x00,0x00,0x00,0x00,
  0x00,0x00,0xff,0xfc,0x00,0x00,0x00,0x00,
  0x00,0x00,0xff,0xdc,0x00,0x00,0x00,0x00,
  0x00,0x00,0xef,0xde,0x00,0x00,0x00,0x00,
  0x00,0x03,0xb7,0xee,0x00,0x00,0x00,0x00,
  0x00,0x03,0xdb,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x07,0xdf,0xff,0xff,0x00,0x00,0x00,
  0x00,0x0f,0x7f,0xfc,0x0f,0xc0,0x00,0x00,
  0x00,0x0e,0x7f,0xfe,0x00,0x00,0x00,0x00,
  0x00,0x3e,0x7f,0xef,0x00,0x00,0x00,0x00,
  0x00,0x3c,0xff,0xdf,0xc0,0x00,0x00,0x00,
  0x00,0x00,0xff,0xbf,0xc0,0x00,0x00,0x00,
  0x00,0x01,0xfe,0x1f,0xe0,0x00,0x00,0x00,
  0x00,0x03,0xf8,0x07,0xf8,0x00,0x00,0x00,
  0x00,0x1f,0xf0,0x03,0xf8,0x00,0x00,0x00,
  0x00,0xff,0x00,0x01,0xf8,0x00,0x00,0x00,
  0x01,0xfc,0x00,0x01,0xfc,0x00,0x00,0x00,
  0x07,0xe0,0x00,0x00,0xfe,0x00,0x00,0x00,
  0x3e,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,
  0xfc,0x00,0x00,0x00,0x1f,0x00,0x00,0x00,
  0x1e,0x00,0x00,0x00,0x0f,0xe0,0x00,0x00,
  0x03,0xc0,0x00,0x00,0x0f,0xf8,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  
  };
  static const unsigned char PROGMEM walk2[]={
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
 0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x3f,0xf0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x7f,0xf0,0x00,0x00,0x00,
  0x00,0x00,0x00,0x7f,0xf8,0x00,0x00,0x00,
  0x00,0x00,0x00,0x3f,0xf0,0x00,0x00,0x00,
  0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,
  0x00,0x00,0x01,0xff,0xc0,0x00,0x00,0x00,
  0x00,0x00,0x03,0xff,0xf0,0x00,0x00,0x00,
  0x00,0x00,0x03,0xff,0xf8,0x00,0x00,0x00,
  0x00,0x00,0x07,0xdf,0xf8,0x00,0x00,0x00,
  0x00,0x00,0x0f,0xbf,0xf8,0x00,0x00,0x00,
  0x00,0x00,0x1f,0xff,0xef,0xf0,0x00,0x00,
  0x00,0x00,0x3f,0xff,0xff,0xff,0xe0,0x00,
  0x00,0x00,0x3f,0xff,0xe0,0x00,0x00,0x00,
  0x00,0x00,0x7f,0xff,0xe0,0x00,0x00,0x00,
  0x00,0x03,0xe7,0xff,0xf8,0x00,0x00,0x00,
  0x00,0x03,0xc7,0xff,0xfc,0x00,0x00,0x00,
  0x00,0x00,0x0f,0xff,0xfe,0x00,0x00,0x00,
  0x00,0x00,0x0f,0xf3,0xfe,0x00,0x00,0x00,
  0x00,0x00,0x1f,0xc0,0xff,0x00,0x00,0x00,
  0x00,0x00,0x3f,0x80,0x3f,0x80,0x00,0x00,
  0x00,0x00,0xff,0x00,0x1f,0xe0,0x00,0x00,
  0x00,0x03,0xf8,0x00,0x0f,0xf0,0x00,0x00,
  0x00,0x03,0xf0,0x00,0x03,0xf8,0x00,0x00,
  0x00,0x07,0xe0,0x00,0x00,0xfc,0x00,0x00,
  0x00,0x07,0x80,0x00,0x00,0x1f,0x00,0x00,
  0x00,0x1f,0x80,0x00,0x00,0x07,0xff,0x00,
  0x00,0x0f,0xf0,0x00,0x00,0x07,0x80,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
  };
  static const unsigned char PROGMEM stand[]={
  0x00,0x00,0x00,0x00,0xff,0xf8,0x00,0x00,
  0x00,0x00,0x00,0x3f,0x80,0x0f,0xc0,0x00,
  0x00,0x00,0x01,0xf0,0x00,0x00,0xf8,0x00,
  0x00,0x00,0x0f,0x80,0x00,0x00,0x3e,0x00,
  0x00,0x00,0x3c,0x00,0x00,0x00,0x0f,0x00,
  0x00,0x00,0xf0,0x00,0x00,0x00,0x07,0x80,
  0x00,0x01,0xe0,0xff,0x00,0x3f,0xc3,0xc0,
  0x00,0x07,0x87,0x81,0xc1,0xe0,0x79,0xe0,
  0x00,0x0f,0x07,0xe0,0xe1,0xfc,0x39,0xe0,
  0x00,0x0f,0x03,0xe3,0xc0,0xf8,0x71,0xe0,
  0x00,0x1e,0x00,0x7e,0x00,0x1f,0x81,0xe0,
  0x00,0x1e,0x00,0x00,0x00,0x00,0x01,0xe0,
  0x00,0x1e,0x00,0x00,0x00,0x00,0x03,0xc0,
  0x00,0x1e,0x00,0x00,0x00,0x00,0x07,0x80,
  0x00,0x1e,0x00,0x00,0x00,0x00,0x0f,0x00,
  0x00,0x0e,0x00,0x00,0x00,0x00,0x1e,0x00,
  0x00,0x0f,0x00,0x00,0x00,0x00,0x7c,0x00,
  0x00,0x07,0xc0,0x00,0x00,0x01,0xf0,0x00,
  0x00,0x01,0xe0,0x00,0x00,0x07,0xc0,0x00,
  0x00,0x00,0x7c,0x00,0x00,0x3e,0x00,0x00,
  0x00,0x00,0x0f,0xc0,0x07,0xe0,0x00,0x00,
  0x00,0x00,0x00,0x7f,0xfc,0x00,0x00,0x00,
  0x00,0x00,0x00,0xf8,0x00,0x00,0x00,0x00,
  0x00,0x00,0x03,0xf0,0x00,0x00,0x00,0x00,
  0x00,0x00,0x0f,0xe0,0x00,0x00,0x00,0x00,
  0x00,0x00,0x1f,0xc0,0x00,0x00,0x00,0x00,
  0x00,0x00,0x7f,0xc0,0x00,0x00,0x00,0x00,
  0x00,0x01,0xff,0xf8,0x00,0x00,0x00,0x00,
  0x00,0x07,0x3f,0xdc,0x00,0x00,0x00,0x00,
  0x00,0x0c,0x7f,0xdc,0x00,0x00,0x00,0x00,
  0x00,0x38,0x7f,0xce,0x00,0x00,0x00,0x00,
  0x00,0x60,0xfb,0xc7,0x00,0x00,0x00,0x00,
    };
 static const unsigned char PROGMEM pause[]={
0x07,0x80,0x00,0x00,0x00,0x00,0x03,0xe0,
  0x0f,0xf8,0x00,0x07,0xe0,0x00,0x1f,0xf0,
  0x0f,0xff,0xbf,0xff,0xff,0xfd,0xff,0xf0,
  0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,
  0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,
  0x07,0xff,0xff,0xff,0xff,0xff,0xff,0xe0,
  0x07,0xff,0xbf,0xff,0xff,0xf9,0xff,0xe0,
  0x0f,0xff,0x3f,0xff,0xff,0xf9,0xff,0xe0,
  0x0f,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,
  0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xf0,
  0x1f,0xff,0xf0,0x00,0x00,0x1f,0xff,0xf8,
  0x3f,0xff,0x80,0x00,0x00,0x03,0xff,0xf8,
  0x3f,0xff,0x00,0x60,0x0c,0x01,0xff,0xf8,
  0x7f,0xff,0xc0,0x00,0x00,0x07,0xff,0xfc,
  0x7f,0xff,0xfc,0x00,0x00,0x7f,0xff,0xfc,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfe,
  0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,
  0x7f,0xff,0xff,0xff,0xff,0xff,0xff,0xfc,
  0x3f,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,
  0x1f,0xff,0xff,0xff,0xff,0xff,0xff,0xf8,
  0x0f,0xfc,0x00,0x00,0x00,0x00,0x7f,0xf0,
  0x07,0xf0,0x00,0x00,0x00,0x00,0x1f,0xc0,
  0x01,0xc0,0x00,0x00,0x00,0x00,0x00,0x00,
  
  };   
 byte seven_seg_digits[10][7] = { { 1,1,1,1,1,1,0 },  // = 0
                                 { 0,1,1,0,0,0,0 },  // = 1
                                 { 1,1,0,1,1,0,1 },  // = 2
                                 { 1,1,1,1,0,0,1 },  // = 3
                                 { 0,1,1,0,0,1,1 },  // = 4
                                 { 1,0,1,1,0,1,1 },  // = 5
                                 { 1,0,1,1,1,1,1 },  // = 6
                                 { 1,1,1,0,0,0,0 },  // = 7
                                 { 1,1,1,1,1,1,1 },  // = 8
                                 { 1,1,1,0,0,1,1 }   // = 9
                             };

void setup() {
  Serial.begin(9600);
  // put your setup code here, to run once:
  display.begin(SSD1306_SWITCHCAPVCC);
  pinMode(2, OUTPUT);  
  pinMode(3, OUTPUT);
  pinMode(4, OUTPUT);
  pinMode(5, OUTPUT);
  pinMode(6, OUTPUT);
  pinMode(7, OUTPUT);
  pinMode(8, OUTPUT);

}
void sevenSegWrite(byte digit) {
  byte pin = 2;
  for (byte seg = 0; seg < 7; ++seg) {
    digitalWrite(pin, seven_seg_digits[digit][seg]);
    ++pin;
  }
}

int counter =10;
int i;

void loop() {
  // put your main code here, to run repeatedly:
  counter--;
 int fsr_value=analogRead(fsr_pin);//讀取FSR
 int led_value=map(fsr_value,0,1023,0,255);//從0~1023映射到0~255
 if(led_value>75)
 {
  sevenSegWrite(counter); 
 display.clearDisplay();
 display.setTextColor(WHITE);
 display.setTextSize(2);
 display.setCursor(75,10);
 display.print("WAIT");
 display.drawBitmap(10,0,pause,64,32,WHITE);
 display.display(); 
 delay(5000);
 }
if (counter>0)
{
  sevenSegWrite(counter); 
 
 for(i=0;i<2;i++){
   display.clearDisplay();
 display.setTextColor(WHITE);
 display.setTextSize(2);
 display.setCursor(70,10);
 display.drawBitmap(10,0,walk1,64,32,WHITE);
 display.display(); 
  delay(300) ;
 display.clearDisplay();
 display.setTextColor(WHITE);
 display.setTextSize(2);
 display.setCursor(70,10);
 display.drawBitmap(10,0,walk2,64,32,WHITE);
 display.display(); 
  delay(300);
  }
 

}
else
{  
 
  sevenSegWrite(counter); 
 display.clearDisplay();
 display.setTextColor(WHITE);
 display.setTextSize(2);
 display.setCursor(75,10);
 display.print("STOP");
 display.drawBitmap(10,0,stand,64,32,WHITE);
 display.display(); 
 counter=10;
delay(4000);
 }

 delay(0);
}

